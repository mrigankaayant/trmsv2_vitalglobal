package com.ayantsoft.vitalglobal.pojo;
// Generated 21 Dec, 2017 4:58:49 PM by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Employee generated by hbm2java
 */
@Entity
@Table(name = "employee", catalog = "ayant_trmsv2", uniqueConstraints = @UniqueConstraint(columnNames = "user_profile_id"))
public class Employee implements java.io.Serializable {

	private Integer empId;
	private ContactAddress contactAddress;
	private Department department;
	private Designation designation;
	private Employee employee;
	private UserProfile userProfile;
	private Boolean active;
	private Date dateOfBirth;
	private Date dateOfJoining;
	private String employeeType;
	private String gender;
	private String maritalStatus;
	private String name;
	private Long salary;
	private String phoneExtension;
	private Set<FollowUp> followUps = new HashSet<FollowUp>(0);
	private Set<ProfileImage> profileImages = new HashSet<ProfileImage>(0);
	private Set<CandidatePayment> candidatePayments = new HashSet<CandidatePayment>(0);
	private Set<Candidate> candidates = new HashSet<Candidate>(0);
	private Set<Candidate> candidates_1 = new HashSet<Candidate>(0);
	private Set<Employee> employees = new HashSet<Employee>(0);
	private Set<EmployeeHasTask> employeeHasTasks = new HashSet<EmployeeHasTask>(0);

	public Employee() {
	}

	public Employee(ContactAddress contactAddress, Department department, Designation designation,
			UserProfile userProfile) {
		this.contactAddress = contactAddress;
		this.department = department;
		this.designation = designation;
		this.userProfile = userProfile;
	}

	public Employee(ContactAddress contactAddress, Department department, Designation designation, Employee employee,
			UserProfile userProfile, Boolean active, Date dateOfBirth, Date dateOfJoining, String employeeType,
			String gender, String maritalStatus, String name, Long salary, String phoneExtension,
			Set<FollowUp> followUps, Set<ProfileImage> profileImages, Set<CandidatePayment> candidatePayments,
			Set<Candidate> candidates, Set<Candidate> candidates_1, Set<Employee> employees,
			Set<EmployeeHasTask> employeeHasTasks) {
		this.contactAddress = contactAddress;
		this.department = department;
		this.designation = designation;
		this.employee = employee;
		this.userProfile = userProfile;
		this.active = active;
		this.dateOfBirth = dateOfBirth;
		this.dateOfJoining = dateOfJoining;
		this.employeeType = employeeType;
		this.gender = gender;
		this.maritalStatus = maritalStatus;
		this.name = name;
		this.salary = salary;
		this.phoneExtension = phoneExtension;
		this.followUps = followUps;
		this.profileImages = profileImages;
		this.candidatePayments = candidatePayments;
		this.candidates = candidates;
		this.candidates_1 = candidates_1;
		this.employees = employees;
		this.employeeHasTasks = employeeHasTasks;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "emp_id", unique = true, nullable = false)
	public Integer getEmpId() {
		return this.empId;
	}

	public void setEmpId(Integer empId) {
		this.empId = empId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "contact_address_id", nullable = false)
	public ContactAddress getContactAddress() {
		return this.contactAddress;
	}

	public void setContactAddress(ContactAddress contactAddress) {
		this.contactAddress = contactAddress;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "department_id", nullable = false)
	public Department getDepartment() {
		return this.department;
	}

	public void setDepartment(Department department) {
		this.department = department;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "designation_id", nullable = false)
	public Designation getDesignation() {
		return this.designation;
	}

	public void setDesignation(Designation designation) {
		this.designation = designation;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "supervisor_id")
	public Employee getEmployee() {
		return this.employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_profile_id", unique = true, nullable = false)
	public UserProfile getUserProfile() {
		return this.userProfile;
	}

	public void setUserProfile(UserProfile userProfile) {
		this.userProfile = userProfile;
	}

	@Column(name = "active")
	public Boolean getActive() {
		return this.active;
	}

	public void setActive(Boolean active) {
		this.active = active;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_of_birth", length = 10)
	public Date getDateOfBirth() {
		return this.dateOfBirth;
	}

	public void setDateOfBirth(Date dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_of_joining", length = 10)
	public Date getDateOfJoining() {
		return this.dateOfJoining;
	}

	public void setDateOfJoining(Date dateOfJoining) {
		this.dateOfJoining = dateOfJoining;
	}

	@Column(name = "employee_type", length = 45)
	public String getEmployeeType() {
		return this.employeeType;
	}

	public void setEmployeeType(String employeeType) {
		this.employeeType = employeeType;
	}

	@Column(name = "gender", length = 6)
	public String getGender() {
		return this.gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	@Column(name = "marital_status", length = 10)
	public String getMaritalStatus() {
		return this.maritalStatus;
	}

	public void setMaritalStatus(String maritalStatus) {
		this.maritalStatus = maritalStatus;
	}

	@Column(name = "name", length = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "salary", precision = 10, scale = 0)
	public Long getSalary() {
		return this.salary;
	}

	public void setSalary(Long salary) {
		this.salary = salary;
	}

	@Column(name = "phone_extension", length = 45)
	public String getPhoneExtension() {
		return this.phoneExtension;
	}

	public void setPhoneExtension(String phoneExtension) {
		this.phoneExtension = phoneExtension;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<FollowUp> getFollowUps() {
		return this.followUps;
	}

	public void setFollowUps(Set<FollowUp> followUps) {
		this.followUps = followUps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<ProfileImage> getProfileImages() {
		return this.profileImages;
	}

	public void setProfileImages(Set<ProfileImage> profileImages) {
		this.profileImages = profileImages;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<CandidatePayment> getCandidatePayments() {
		return this.candidatePayments;
	}

	public void setCandidatePayments(Set<CandidatePayment> candidatePayments) {
		this.candidatePayments = candidatePayments;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "candidate_has_salesresponsibility", catalog = "ayant_trmsv2", joinColumns = {
			@JoinColumn(name = "employee_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "candidate_id", nullable = false, updatable = false) })
	public Set<Candidate> getCandidates() {
		return this.candidates;
	}

	public void setCandidates(Set<Candidate> candidates) {
		this.candidates = candidates;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<Candidate> getCandidates_1() {
		return this.candidates_1;
	}

	public void setCandidates_1(Set<Candidate> candidates_1) {
		this.candidates_1 = candidates_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<Employee> getEmployees() {
		return this.employees;
	}

	public void setEmployees(Set<Employee> employees) {
		this.employees = employees;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<EmployeeHasTask> getEmployeeHasTasks() {
		return this.employeeHasTasks;
	}

	public void setEmployeeHasTasks(Set<EmployeeHasTask> employeeHasTasks) {
		this.employeeHasTasks = employeeHasTasks;
	}

}
